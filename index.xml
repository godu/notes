<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Godu’s Zettlekasten - Godu&#39;s Zettelkasten</title><id>https://godu.github.io/notes/</id><updated>2021-05-06T12:09</updated><link href="https://godu.github.io/notes/"/><entry><id>https://godu.github.io/notes/dc7a52f2.html</id><title type="text">Brandolini’s law</title><updated>2021-05-06T12:09</updated><content type="html">&lt;p&gt;As known as &lt;strong&gt;bullshit asymmetry principle&lt;/strong&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The amount of energy needed to refute bullshit is an order of magnitude larger than to produce it.&lt;/p&gt;&lt;/blockquote&gt;</content><link href="https://godu.github.io/notes/dc7a52f2.html"/></entry><entry><id>https://godu.github.io/notes/6975f450.html</id><title type="text">Lambda DAYS 2021</title><updated>2021-02-16T11:28</updated><content type="html">&lt;h2 id=&#34;industry-versus-academia--learning-and-teaching-programming&#34;&gt;Industry versus academia ? Learning and teaching programming&lt;/h2&gt;&lt;p&gt;University : Learn to learn Industry : Learn to do stuff&lt;/p&gt;&lt;p&gt;FP paradigm could be proof&lt;/p&gt;&lt;p&gt;First notions to teach&lt;/p&gt;&lt;ul&gt;&lt;li&gt;pattern matching&lt;/li&gt;&lt;li&gt;recursion&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;top-down vs bottom-up ???&lt;/p&gt;&lt;p&gt;Asynchronous teaching&lt;/p&gt;&lt;p&gt;How to convince our university to teach FP ? concurrency programming is the future =&amp;gt; functionnal programming FP principals are useful in many other languages.&lt;/p&gt;&lt;h2 id=&#34;toward-automated-feedback-in-htdp-based-programming-a-dsl-based-approach&#34;&gt;Toward Automated Feedback in HtDP-based Programming: A DSL-based Approach&lt;/h2&gt;&lt;p&gt;How to Design Programs&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Data definition &amp;amp; examples&lt;/li&gt;&lt;li&gt;Purpose, signature, header&lt;/li&gt;&lt;li&gt;Input-output examples&lt;/li&gt;&lt;li&gt;Function template&lt;/li&gt;&lt;li&gt;Function definition&lt;/li&gt;&lt;li&gt;Testing&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;a href=&#34;https://htdp.org/&#34;&gt;https://htdp.org/&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;a-bricklayer-tech-report&#34;&gt;A Bricklayer-Tech Report&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://bricklayer.org/learn/&#34;&gt;https://bricklayer.org/learn/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://www.amazon.fr/Cellular-Automaton-Modeling-Biological-Formation-ebook/dp/B07BQDSYPY/&#34;&gt;Cellular Automaton Modeling of Biological Pattern Formation&lt;/a&gt; &lt;a href=&#34;https://www.amazon.fr/Cellular-Automata-Discrete-Andrew-Ilachinski/dp/981238183X&#34;&gt;Cellular Automata: a Discrete Universe&lt;/a&gt; &lt;a href=&#34;https://www.amazon.fr/Introduction-Computational-Materials-Science-Richard-ebook/dp/B00B9DFBCE&#34;&gt;Introduction to Computational Materials Science: Fundamentals to Applications&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;factorio&#34;&gt;Factorio&lt;/h2&gt;&lt;p&gt;Ingredient → type Assembler → function&lt;/p&gt;&lt;p&gt;Assembler consume ingredient. Linear function consume data too.&lt;/p&gt;&lt;p&gt;High order function Currying&lt;/p&gt;&lt;p&gt;fmap Functor Either/tuple merge operator → Monoidal functor applicative functor Monad ? nope&lt;/p&gt;&lt;p&gt;Mutex with train. dead locks&lt;/p&gt;&lt;h2 id=&#34;writing-good-programs-in-functional-languages-who-why-how-&#34;&gt;Writing good programs in functional languages: who, why, how ?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Names matter a lot&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Structure matters: encapsulation good, spaghetti bad&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Types are a double-edged, very sharp sword&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Requirements change, like it or not&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Debugging is hard and best avoided&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Testing, early, helps&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;You can argue FP is a success (FP features in Java)&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;A language that doesn’t affect the way you think about programming, is not the ……&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Cleverness problem. ↑ clever ↓ debugging&lt;/p&gt;&lt;h2 id=&#34;introduction-nx&#34;&gt;Introduction Nx&lt;/h2&gt;&lt;p&gt;Erlang lib&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Multi-dimensional typed array (aka tensors)&lt;/li&gt;&lt;li&gt;Numerical definitions&lt;/li&gt;&lt;li&gt;Automatic differentiation&lt;/li&gt;&lt;li&gt;JIT/AOT staged compilation to the CPU/GPU&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Exemple: Live-code a neural network from scratch&lt;/p&gt;&lt;h2 id=&#34;constructive-bidirectional-programming&#34;&gt;Constructive Bidirectional Programming&lt;/h2&gt;&lt;p&gt;catamorphism + catamorphism&lt;/p&gt;&lt;p&gt;profunctor =&amp;gt; lens, et c’est par design. l’oplog mongo envoi juste une instruction de détruire doc dans collectoin ay&lt;/p&gt;&lt;p&gt;Huge DB ——&amp;gt; View ↑—update—/&lt;/p&gt;&lt;p&gt;We could modify data in view and the mutation is propaged to db&lt;/p&gt;&lt;h3 id=&#34;get-based-approach&#34;&gt;Get-based Approach&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;put s (get s) = s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Modify the getted value&lt;/p&gt;&lt;h3 id=&#34;putback-based-approach&#34;&gt;Putback-based Approach&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;get (put s t) = t&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Emit mutation transformation and wait to get new value.&lt;/p&gt;&lt;p&gt;1 put =&amp;gt; 1 get to make sure data is synchr with source&lt;/p&gt;&lt;p&gt;Challenges&lt;/p&gt;&lt;ul&gt;&lt;li&gt;bfold&lt;/li&gt;&lt;li&gt;fusion property&lt;/li&gt;&lt;li&gt;map fusion&lt;/li&gt;&lt;li&gt;Scan Lemma ???&lt;/li&gt;&lt;li&gt;Hornor’s rule ???&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;bidirectionnal fold =&amp;gt; bforld&lt;/p&gt;&lt;p&gt;Contract Lens :: { contract source =&amp;gt; cs contract view =&amp;gt; cv&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;get
put&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;&lt;h2 id=&#34;effective-programming-in-ocaml&#34;&gt;Effective Programming in OCaml&lt;/h2&gt;&lt;p&gt;Multicore OCaml project&lt;/p&gt;&lt;p&gt;Use generator to implement effect handlers&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;ocaml language-ocaml&#34;&gt;effect E : string

let comp () =
    print_string &amp;quot;0 &amp;quot;;  
    print_string (perform E);  
    print_string &amp;quot;3 &amp;quot;

let main () = 
    try
        comp ()
    with effect E k -&amp;gt;
        print_string &amp;quot;1 &amp;quot;;
        continue k &amp;quot;2 &amp;quot;;
        print_string “4 &amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;location-type-errors-speedily-with-delta-debugging&#34;&gt;Location Type Errors Speedily with Delta Debugging&lt;/h2&gt;&lt;p&gt;Rien compris&lt;/p&gt;&lt;h2 id=&#34;program-equivalence-in-sequential-core-erlang&#34;&gt;Program Equivalence in Sequential Core Erlang&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;e === (() =&amp;gt; e)()
a + 1 + 1 === a + 2
f(a, b) === f(a, b)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try to detect equivalent expressions and factorise it.&lt;/p&gt;&lt;p&gt;Side effects / exceptions are not supported.&lt;/p&gt;&lt;h2 id=&#34;hardware-as-software&#34;&gt;Hardware as Software&lt;/h2&gt;&lt;p&gt;FPGA or ASIC programmable board as a service&lt;/p&gt;&lt;p&gt;Memory management&lt;/p&gt;&lt;ul&gt;&lt;li&gt;D flip-flop (DFF)&lt;/li&gt;&lt;li&gt;state management =&amp;gt; FSM&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Reactive time-varying spatial “program” =&amp;gt; Streams, Reactive Programming&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Combinational logic -&amp;gt; Spatial&lt;/li&gt;&lt;li&gt;Sequential logic with clocked state update -&amp;gt; Temporal&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;excel-meets-lambda&#34;&gt;Excel meets Lambda&lt;/h2&gt;&lt;p&gt;We could define and use lambda in excel&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Turing complet&lt;/strong&gt; because &lt;code&gt;Fixed point combinator&lt;/code&gt;, that he said.&lt;/p&gt;&lt;p&gt;no var but LET function&lt;/p&gt;&lt;h2 id=&#34;a-generic-back-end-for-exploratory-programming&#34;&gt;A generic back-end for exploratory programming&lt;/h2&gt;&lt;p&gt;Whatever…&lt;/p&gt;&lt;h2 id=&#34;fast-xmlhtml-for-haskell-xml-typelift&#34;&gt;Fast XML/HTML for Haskell: XML TypeLift&lt;/h2&gt;&lt;p&gt;Generic parsers:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;expat (fast xml c parser)&lt;/li&gt;&lt;li&gt;DOM (memory problem) vs SAX (stream processing)&lt;/li&gt;&lt;li&gt;asmxml (32-bit only)&lt;/li&gt;&lt;li&gt;pugixml (replaces text with pointers in-place)&lt;/li&gt;&lt;li&gt;FPGA accelerators for xml parsing&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Haskell solution&lt;/p&gt;&lt;ul&gt;&lt;li&gt;xeno: A fast, low-memory use, event-based XML parser in pure Haskell.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;correct-by-construction-cryptographic-arithmetic-in-coq&#34;&gt;Correct-by-Construction Cryptographic Arithmetic in Coq&lt;/h2&gt;&lt;p&gt;Use Coq to generate optimized code from input parameters.&lt;/p&gt;&lt;h2 id=&#34;generating-programs-from-type&#34;&gt;Generating Programs from Type&lt;/h2&gt;&lt;p&gt;Search function from type in Hoogles&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://comcom.csail.mit.edu/comcom/#Synquid&#34;&gt;Synquid&lt;/a&gt;: synthesizes programs from refinement types&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://hoogleplus.goto.ucsd.edu/&#34;&gt;Hoogle+&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr /&gt;&lt;h2 id=&#34;dynamic-creation-of-well-typed-dsl-expressions&#34;&gt;Dynamic Creation of Well-Typed DSL Expressions&lt;/h2&gt;&lt;p&gt;ADT is often not good enough for a DSL (type errors, unsafe variables)&lt;/p&gt;&lt;p&gt;works for phantom types, GADTs and functions guarantee well-typed.&lt;/p&gt;&lt;h2 id=&#34;asynchronous-shared-data-sources&#34;&gt;Asynchronous Shared Data Sources&lt;/h2&gt;&lt;p&gt;Data sources:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;memory, fs&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;stream&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;kafka, mysql, mqtt, hadoop&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Read&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Write&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Update&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Lens&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Fuse ???&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;…&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Notify&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Share&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;=&amp;gt; Shared Data Sources (SDSs)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Task Oriented Programming (TOP)&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Coordinate collaboration between people and machines to reach common goal&lt;/li&gt;&lt;li&gt;Declarative paradigm&lt;/li&gt;&lt;li&gt;iTasks: event driven state transformers&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Programmer’s interaction with shares:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;get/watch&lt;/li&gt;&lt;li&gt;set&lt;/li&gt;&lt;li&gt;update&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;History&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Uniform Data Sources&lt;/li&gt;&lt;li&gt;Shared Data Sources&lt;/li&gt;&lt;li&gt;Parametrec Lenses&lt;/li&gt;&lt;li&gt;Parametric Shared Data Sources&lt;/li&gt;&lt;li&gt;Class based Shared Data Sources&lt;/li&gt;&lt;li&gt;Asynchronous Shared Data Sources&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Provide uniformed interface to manipulate data sources.&lt;/p&gt;&lt;h2 id=&#34;adventures-in-the-browser-and-nodejs-without-writing-much-javascript-using-purescript&#34;&gt;Adventures in the browser and Node.js without writing (much) JavaScript (using PureScript)&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Transpiles to JS&lt;/li&gt;&lt;li&gt;ADT (no GADT)&lt;/li&gt;&lt;li&gt;HKT&lt;/li&gt;&lt;li&gt;TypeClasses&lt;/li&gt;&lt;li&gt;Rebindable syntax&lt;/li&gt;&lt;li&gt;Functional dependencies&lt;/li&gt;&lt;li&gt;Row polymorphism&lt;/li&gt;&lt;li&gt;Extensible records &amp;amp; variants&lt;/li&gt;&lt;li&gt;No language pragmas &amp;amp; modern Prelude&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Bi-directional parsing (encoding&amp;lt;-&amp;gt;decoding) (like io-ts) =&amp;gt; purescript-argonaut&lt;/p&gt;&lt;h2 id=&#34;sound-on-beam-music-in-the-land-of-distributed-lisp&#34;&gt;Sound on BEAM: Music in the Land of Distributed Lisp&lt;/h2&gt;&lt;p&gt;OSEF&lt;/p&gt;&lt;h2 id=&#34;building-full-stack-web-applications-with-safe-stack&#34;&gt;Building Full-Stack Web Applications with Safe Stack&lt;/h2&gt;&lt;p&gt;SAFE Stack&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Full F# Web Stack (client and server)&lt;/li&gt;&lt;li&gt;Functional First Architecture&lt;/li&gt;&lt;li&gt;Strong Type Safety&lt;/li&gt;&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;uave/&lt;strong&gt;S&lt;/strong&gt;aturn &lt;strong&gt;A&lt;/strong&gt;zure/&lt;strong&gt;A&lt;/strong&gt;WS &lt;strong&gt;F&lt;/strong&gt;able &lt;strong&gt;E&lt;/strong&gt;lmish&lt;/li&gt;&lt;li&gt;Dotnet Core: multi platform&lt;/li&gt;&lt;li&gt;.NET -&amp;gt; ASP.NET -&amp;gt; Giraffe -&amp;gt; Saturn&lt;/li&gt;&lt;li&gt;F# on the client is made possible by the Fable&lt;/li&gt;&lt;li&gt;Fable as webpack plugin&lt;ul&gt;&lt;li&gt;tree shaking&lt;/li&gt;&lt;li&gt;hmr&lt;/li&gt;&lt;li&gt;minification&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Wasm with Bolero project&lt;/li&gt;&lt;li&gt;Fable use babel js compiler&lt;/li&gt;&lt;li&gt;fully compatible with npm packages&lt;/li&gt;&lt;li&gt;Elmish is a EML architecture for Fable project&lt;/li&gt;&lt;li&gt;&lt;code&gt;dotnet new -i SAFE.Template&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;multicloud-bindings-from-web-pages&#34;&gt;Multicloud bindings from web pages&lt;/h2&gt;&lt;p&gt;Broken VOD&lt;/p&gt;&lt;h2 id=&#34;proofviz-an-interactive-visual-proof-explorer&#34;&gt;ProofViz: An Interactive Visual Proof Explorer&lt;/h2&gt;&lt;p&gt;Theorem Proving Tactics&lt;/p&gt;&lt;p&gt;Goals:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;explicit&lt;/li&gt;&lt;li&gt;transparent&lt;/li&gt;&lt;li&gt;automation with tactics&lt;/li&gt;&lt;li&gt;track proof state&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;dimensional-analysis-for-multidimensional-dataflow-programming&#34;&gt;Dimensional Analysis for Multidimensional Dataflow Programming&lt;/h2&gt;&lt;p&gt;Dataflow programming: every data object is a stream.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lucid_(programming_language)&#34;&gt;Lucid&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Operators:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;First&lt;/li&gt;&lt;li&gt;Next&lt;/li&gt;&lt;li&gt;FBY: follow by&lt;/li&gt;&lt;li&gt;ASA: as soon as&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;programming-languages-in-agda--programming-languages-in-agda&#34;&gt;(Programming Languages) in Agda = Programming (Languages in Agda)&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://plfa.inf.ed.ac.uk/&#34;&gt;https://plfa.inf.ed.ac.uk/&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;a-uml-equivalent-for-functional-programming&#34;&gt;A “UML” equivalent for functional programming&lt;/h2&gt;&lt;p&gt;Philosophy → Meaning ↔ Program&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Underlying philosophy must be &lt;strong&gt;invariant&lt;/strong&gt; – gives a shared perspective to practitioners&lt;/li&gt;&lt;li&gt;Meaning is build on underlying philosophy&lt;/li&gt;&lt;li&gt;Meaning can evolve along with program/system&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;UML =&amp;gt; Plato’s Theory of Forms&lt;/p&gt;&lt;p&gt;Language-games (Wittgenstein) -&amp;gt; Programming isn’t natural language&lt;/p&gt;&lt;p&gt;A Language of Functional Programming = Language of Mathematics + Language Game&lt;/p&gt;</content><link href="https://godu.github.io/notes/6975f450.html"/></entry><entry><id>https://godu.github.io/notes/f50fab62.html</id><title type="text">Monadic Parser Combinators</title><updated>2021-01-03T13:36</updated><content type="html">&lt;p&gt;In functional programming, a&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;haskell language-haskell&#34;&gt;type Parser a = String -&amp;gt; [(a,String)]&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf&#34;&gt;Monadic Parser Combinators&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content><link href="https://godu.github.io/notes/f50fab62.html"/></entry><entry><id>https://godu.github.io/notes/7849a325.html</id><title type="text">Commutative diagram in latex</title><updated>2021-01-03T12:19</updated><content type="html">&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;$$
\begin{equation}\begin{CD}
S^{{\mathcal{W}}_\Lambda}\otimes T   @&amp;gt;j&amp;gt;&amp;gt;   T\\
@VVV                                    @VV{End P}V\\
(S\otimes T)/I                  @=      (Z\otimes T)/J
\end{CD}\end{equation}
$$&lt;/span&gt;&lt;/p&gt;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://ctan.mines-albi.fr/macros/latex/required/amsmath/amscd.pdf&#34;&gt;The &lt;code&gt;amscd&lt;/code&gt; package&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</content><link href="https://godu.github.io/notes/7849a325.html"/></entry><entry><id>https://godu.github.io/notes/72ecfe9c.html</id><title type="text">Anamorphism</title><updated>2020-12-31T14:04</updated><content type="html">&lt;p&gt;In functional programming, an anamorphism is a generalization of the concept of &lt;span class=&#34;zettel-link-container folge&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;2020-12-31T10:27&#34;&gt;&lt;a href=&#34;56e94cd9.html&#34;&gt;unfold&lt;/a&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. Formally, anamorphisms are generic functions that can corecursively construct a result of a certain type and which is parameterized by functions that determine the next single step of the construction.&lt;/p&gt;&lt;p&gt;The categorical dual of the anamorphism is the &lt;span class=&#34;zettel-link-container folge&#34;&gt;&lt;span class=&#34;zettel-link&#34; title=&#34;2020-12-31T10:30&#34;&gt;&lt;a href=&#34;d1b1f980.html&#34;&gt;Catamorphism&lt;/a&gt;&lt;span data-nosnippet=&#34;&#34; style=&#34;user-select: none; color: gray&#34; title=&#34;Folgezettel&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;$$\begin{CD}
F A @&amp;gt;{F h}&amp;gt;&amp;gt; F B\\
@A{f}AA @A{g}AA \\
A @&amp;gt;{h}&amp;gt;&amp;gt; B
\end{CD}$$&lt;/span&gt;&lt;/p&gt;</content><link href="https://godu.github.io/notes/72ecfe9c.html"/></entry></feed>